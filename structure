Match
    lookup by puuid + # of matches
        matchID
    
    lookup by matchID
        game_datetime	long	Unix timestamp.
        participants	list	Participants.
            placement	            int	            Participant placement upon elimination.
            level	                int 	        Participant Little Legend level. Note: This is not the number of active units.
            last_round	            int	            The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5.
            time_eliminated	        float	        The number of seconds before the participant was eliminated.
            companion	            CompanionDto	Participant's companion.
            traits	                List[TraitDto]	A complete list of traits for the participant's active units.
            players_eliminated	    int	            Number of players the participant eliminated.
            puuid	                string	        Encrypted PUUID.
            total_damage_to_players	int	            Damage the participant dealt to other players.
            units	                List[UnitDto]	A list of active units for the participant.
            gold_left	int	Gold left after participant was eliminated.
        tft_set_number	int	    Teamfight Tactics set number.
        game_length	    float	Game length in seconds.
        queue_id	    int	    Please refer to the League of Legends documentation.
        game_version	string	Game client version.

    get matchhistory
    get matchdetails



Summoner
    lookup by puuid
        profileiconid
        name
        puuid
        summonerlevel
        accountid
        id
        revisiondate

    lookup by name
        profileiconid
        name
        puuid
        summonerlevel
        accountid
        id
        revisiondate

    get puuid
    get name

# Unused Code
class Summoner:
    def __init__(self,name):
        response = requests.get(URL)
        self.id = response.json()['id']
        self.puuid = response.json()['puuid']
        self.accountid = response.json()['accountId']
        self.name = response.json()['name']
        self.history = requestTFTMatchHistory(self.puuid, TFTREGION, APIKEY, MATCHES)

def requestSummonerData(REGION, summonerName, APIKEY):
    URL = 'https://' + REGION + '.api.riotgames.com/tft/summoner/v1/summoners/by-name/' + summonerName + '?api_key=' + APIKEY
    response = requests.get(URL)
    return response.json()
def requestTFTMatchHistory(ID, TFTREGION, APIKEY, matches):
    URL = 'https://' + TFTREGION + '.api.riotgames.com/tft/match/v1/matches/by-puuid/' + ID + '/ids?count=' + matches + '&api_key=' + APIKEY
    response = requests.get(URL)
    return response.json()
def requestTFTSummonerData(ID, REGION, APIKEY, playerlist, uniqueplayerlist):
    URL = 'https://' + REGION + '.api.riotgames.com/tft/summoner/v1/summoners/by-puuid/' + ID + '?api_key=' + APIKEY
    response = requests.get(URL)
    return response.json()
def requestMatchDetails(matchID, TFTREGION, APIKEY):
    URL = 'https://' + TFTREGION + '.api.riotgames.com/tft/match/v1/matches/' + matchID + '?api_key=' + APIKEY
    response = requests.get(URL)
    return response.json()

    #Match(a_summoner)
    #print(a_summoner.name)
    #print(Match(a_summoner).history)

    #print(Match(a_summoner).history[1])
    #print(Match(a_summoner).game_datetime)
    
    #This will be for grabbing people's units
    #print(Match(a_summoner).details['info']['participants'])
    part_list = []
    placement = []
    for person in MatchDetails(a_summoner.history).info:
        for part in person['metadata']['participants']:
            part_list.append(Summoner(part))
        for placement in person['info']:
            placement.append(MatchDetails(part).)
    for part in part_list:
        print(part.name)
    #print(MatchDetails(a_summoner.history).info[0]['metadata']['participants'])
    

    #print(MatchDetails(Summoner(a_summoner.name).history).match_participants)
    #print(Match(a_summoner).details['metadata'])

    Class MatchDetails:
        if type(match_id) == list:
            for match_id in match_ids:
                self.info.append(requestMatchDetails(match_id, TFTREGION, APIKEY))
        else:
            self.getmatchhistory(puuid)
        self.match_participants = []
        for match in self.info:
            for participant in match['metadata']['participants']:
                self.match_participants.append(Summoner(participant).name)